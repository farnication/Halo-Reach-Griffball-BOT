from PIL import ImageGrab
import numpy as np
import cv2
from time import sleep, process_time
import math
import ctypes
from ctypes import wintypes
import time
from win32gui import GetWindowText, GetForegroundWindow
import PySimpleGUI as sg
import configparser
from os import path
from win32api import GetSystemMetrics




sg.Popup('https://www.youtube.com/channel/UCh-TN1GlQfbwDQ03je9jZpg','Created by: Alex Sturgeon','Instructions', '1. First time it runs it needs to be configured, follow youtube link above to do that.',' 2. Click onto Halo Reach while in matchmaking for Grifball ONLY', '3. Script will begin running in 10 seconds', '4. To stop the bot just click off Halo Reach window','5. When ready click OK....','6. Have fun Boosting!',title='Bot Ready To Start!!')

user32 = ctypes.WinDLL('user32', use_last_error=True)

INPUT_MOUSE    = 0
INPUT_KEYBOARD = 1
INPUT_HARDWARE = 2

KEYEVENTF_EXTENDEDKEY = 0x0001
KEYEVENTF_KEYUP       = 0x0002
KEYEVENTF_UNICODE     = 0x0004
KEYEVENTF_SCANCODE    = 0x0008

MAPVK_VK_TO_VSC = 0

W = 0x57
A = 0x41
S = 0x53
D = 0x44
Q = 0x51


UP = 0x26
DOWN = 0x28
A = 0x41

wintypes.ULONG_PTR = wintypes.WPARAM

class MOUSEINPUT(ctypes.Structure):
    _fields_ = (("dx",          wintypes.LONG),
                ("dy",          wintypes.LONG),
                ("mouseData",   wintypes.DWORD),
                ("dwFlags",     wintypes.DWORD),
                ("time",        wintypes.DWORD),
                ("dwExtraInfo", wintypes.ULONG_PTR))

class KEYBDINPUT(ctypes.Structure):
    _fields_ = (("wVk",         wintypes.WORD),
                ("wScan",       wintypes.WORD),
                ("dwFlags",     wintypes.DWORD),
                ("time",        wintypes.DWORD),
                ("dwExtraInfo", wintypes.ULONG_PTR))

    def __init__(self, *args, **kwds):
        super(KEYBDINPUT, self).__init__(*args, **kwds)
        if not self.dwFlags & KEYEVENTF_UNICODE:
            self.wScan = user32.MapVirtualKeyExW(self.wVk,
                                                 MAPVK_VK_TO_VSC, 0)

class HARDWAREINPUT(ctypes.Structure):
    _fields_ = (("uMsg",    wintypes.DWORD),
                ("wParamL", wintypes.WORD),
                ("wParamH", wintypes.WORD))

class INPUT(ctypes.Structure):
    class _INPUT(ctypes.Union):
        _fields_ = (("ki", KEYBDINPUT),
                    ("mi", MOUSEINPUT),
                    ("hi", HARDWAREINPUT))
    _anonymous_ = ("_input",)
    _fields_ = (("type",   wintypes.DWORD),
                ("_input", _INPUT))

LPINPUT = ctypes.POINTER(INPUT)

def _check_count(result, func, args):
    if result == 0:
        raise ctypes.WinError(ctypes.get_last_error())
    return args

user32.SendInput.errcheck = _check_count
user32.SendInput.argtypes = (wintypes.UINT, # nInputs
                             LPINPUT,       # pInputs
                             ctypes.c_int)  # cbSize
# Functions

def PressKey(hexKeyCode):
    x = INPUT(type=INPUT_KEYBOARD,
              ki=KEYBDINPUT(wVk=hexKeyCode))
    user32.SendInput(1, ctypes.byref(x), ctypes.sizeof(x))

def ReleaseKey(hexKeyCode):
    x = INPUT(type=INPUT_KEYBOARD,
              ki=KEYBDINPUT(wVk=hexKeyCode,
                            dwFlags=KEYEVENTF_KEYUP))
    user32.SendInput(1, ctypes.byref(x), ctypes.sizeof(x))

def waitsec(sec):
	for i in range(sec,0,-1):
		print('Starting in: ' + str(i))
		sleep(1)

def calcdistance(x,y,x2=252,y2=318):
	distance = math.sqrt((x-x2)**2 + (y-y2)**2)
	return round(distance,2)

def findstart(frame, color_mask1):
	yellowmask = cv2.bitwise_and(frame, frame, mask = color_mask1)
	grey = cv2.cvtColor(yellowmask, cv2.COLOR_RGB2GRAY)
	contours,_ = cv2.findContours(grey,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)

	for c in contours:
		obj = cv2.boundingRect(c)
		x,y,w,h = obj
		cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2)
		print(x+w/2,y+h/2)
		return (x+w/2,y+h/2)
		

def getframe():
	#img = ImageGrab.grab(bbox=(0,h/2,w*.25,h)) #bbox specifies specific region (bbox= x,y,width,height)
	img = ImageGrab.grab(bbox=(0,600,500,1080)) #bbox specifies specific region (bbox= x,y,width,height)
	img2 = np.array(img, dtype='uint8')

	frame = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)

	color_mask1 = cv2.inRange(frame, np.array([0,190,210]), np.array([50,255,255])) #yellow
	color_mask2 = cv2.inRange(frame, np.array([0,0,235]), np.array([75,40,255])) #red
	color_mask3 = cv2.inRange(frame, np.array([0,0,0]), np.array([2,2,2])) #black
	mask = cv2.bitwise_or(color_mask1 ,color_mask3)#yellow and blue
	mask = cv2.bitwise_or(mask ,color_mask2)

	redmask = cv2.bitwise_and(frame, frame, mask = color_mask2)
	grey = cv2.cvtColor(redmask, cv2.COLOR_RGB2GRAY)
	output = cv2.bitwise_and(frame, frame, mask = mask)

	return frame, grey, output, color_mask1

config = configparser.ConfigParser()
config.read('config.ini')
print('If its the first time running, make sure you are in a game alone and moving constantly')

try:
	Starting_time = int(config['def']['Starting_time'])
	waitsec(Starting_time)
except:
	waitsec(10)




if path.exists('config.ini'):
	print('Config File Loaded')
	config.read('config.ini')

	setup = config['def']['setup']
	attack_distance = int(config['def']['attack_distance'])
	Starting_time = int(config['def']['Starting_time'])

	if setup == 'False':
		print('Modifying Config File')
		center = str(findstart(getframe()[0],getframe()[3]))
		config['def'] = {'setup': 'True', 'center': center, 'attack_distance': str(attack_distance), 'Starting_time' : str(Starting_time)}
		with open('config.ini', 'w') as configfile:
			config.write(configfile)

	config.read('config.ini')
	setup = config['def']['setup']
	center = eval(config['def']['center'])
	attack_distance = int(config['def']['attack_distance'])
	Starting_time = int(config['def']['Starting_time'])

	print('MiniMap Center: ' + str(center))
	print('Attack Distance: ' + str(attack_distance))
	
else:
	print('Creating Config File')
	center = str(findstart(getframe()[0],getframe()[3]))
	config['def'] = {'setup': 'True', 'center': center, 'attack_distance': '40', 'Starting_time' : '5'}
	with open('config.ini', 'w') as configfile:
		config.write(configfile)



startpos = []
ran = 1
xlevel = -10
area = 0
w = GetSystemMetrics(0)
h = GetSystemMetrics(1)

print(w,h)
while GetWindowText(GetForegroundWindow()) == "Halo: The Master Chief Collection  ":
	frame, grey, output, _ = getframe()

	contours,_ = cv2.findContours(grey,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)

	w,h = 0,0
	shortx,shorty,shortw,shorth = 0,0,0,0
	index = 0
	shortest_distance = 500
	for c in contours:
		index = index + 1
		obj = cv2.boundingRect(c)
		x,y,w,h = obj

		distance = calcdistance(x,y)
		if distance < shortest_distance:
			shortest_distance = distance
			shortx,shorty,shortw,shorth = obj
		else:
			cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2)
		cv2.putText(frame, str(index) + '. Distance: ' + str(distance),(x,y), cv2.FONT_HERSHEY_COMPLEX_SMALL,.5,(255, 255, 255))
	cv2.rectangle(frame,(shortx,shorty),(shortx+shortw,shorty+shorth),(0,255,255),2)
	cv2.line(frame,(200,318+xlevel),(400,318+xlevel),(255,255,0))
	cv2.line(frame,(252,200),(252,400),(255,0,0))


	try:
		if shortest_distance < attack_distance:
			ctypes.windll.user32.mouse_event(0x0002, 0, 0, 0, 0)
			time.sleep(.1)
			ctypes.windll.user32.mouse_event(0x0004, 0, 0, 0, 0)
	except:
		print('First-Time Startup: Complete')
		print('[!] Restart Script [!]')
		sleep(3)
		
	if any(frame[100][100]) == 0 and any(frame[200,200] == 0):
		print('Waiting For Game')
		sleep(4)
	else:
		if len(contours) < 1:
			PressKey(W)
			ReleaseKey(A)
			ReleaseKey(D)
			ReleaseKey(S)
		else:
			if shortx+w/2 > center[0]:
				ReleaseKey(A)
				PressKey(D)
			elif shortx+w/2 < center[0]:
				ReleaseKey(D)
				PressKey(A)

			if shorty+h/2 > center[1] + xlevel:
				ReleaseKey(W)
				PressKey(S)
			elif shorty+h/2 < center[1] + xlevel:
				ReleaseKey(S)
				PressKey(W)

	if cv2.waitKey(1) & 0xFF == ord('q'):
		break

cv2.destroyAllWindows()
print('[!] Done, Closing Window')

